#!/usr/bin/env python3
"""
Generate data/metadata/labels.py by mapping raw CSV labels to canonical labels.
Implements normalization and fuzzy matching to handle slight variations without cross-team mapping.
"""

import re
import csv
from pathlib import Path
from difflib import get_close_matches

from data.metadata.labels import label_list as canonical_labels

# Configuration
CSV_PATH = Path("data/metadata/clip_index.csv")
OUT_MODULE = Path("data/metadata/labels.py")
SIMILARITY = 0.6  # cutoff for fuzzy matching


def normalize(lbl: str) -> str:
    """
    Normalize a raw label: strip, uppercase, unify dashes/slashes, collapse spaces.
    """
    lbl = lbl.strip().upper()
    lbl = re.sub(r"[–—\-]", "/", lbl)  # dash → slash
    lbl = re.sub(r"\s*[/,]\s*", " / ", lbl)  # unify separators
    lbl = re.sub(r"\s+", " ", lbl)  # collapse whitespace
    return lbl


def build_label_map(raw_labels, canonical_labels, cutoff=SIMILARITY):
    """
    Map every raw label to the best matching canonical label.
      1) Exact normalized match
      2) Space-insensitive normalized match
      3) Fuzzy match on raw string
    Falls back to identity if no good match.
    """
    # Pre-normalize canonical labels
    canon_norm = {normalize(cl): cl for cl in canonical_labels}
    label_map = {}

    for raw in raw_labels:
        nrm = normalize(raw)

        # 1) Exact normalized match
        if nrm in canon_norm:
            label_map[raw] = canon_norm[nrm]
            continue

        # 2) Space-insensitive match
        for cn_norm, orig in canon_norm.items():
            if nrm.replace(" ", "") == cn_norm.replace(" ", ""):
                label_map[raw] = orig
                break
        else:
            # 3) Fuzzy match on raw label
            matches = get_close_matches(raw, canonical_labels, n=1, cutoff=cutoff)
            if matches:
                label_map[raw] = matches[0]
            else:
                # no good match: map to itself
                label_map[raw] = raw

    return label_map


def main():
    # 1) Gather raw labels from the CSV
    raw_set = set()
    with CSV_PATH.open(newline="") as f:
        reader = csv.DictReader(f)
        for row in reader:
            raw_set.add(row["label"])
    raw_labels = sorted(raw_set)

    # 2) Build mapping to canonical labels
    label_map = build_label_map(raw_labels, canonical_labels)

    # 3) Produce an ordered list: canonicals first, then any extras
    new_set = set(label_map.values())
    ordered = [lbl for lbl in canonical_labels if lbl in new_set]
    extras = sorted(new_set - set(canonical_labels))
    ordered += extras

    # 4) Write out the new labels.py module
    OUT_MODULE.parent.mkdir(parents=True, exist_ok=True)
    with OUT_MODULE.open("w") as f:
        f.write("# AUTOGENERATED from clip_index.csv — do not edit manually\n\n")
        f.write("label_list = [\n")
        for lbl in ordered:
            f.write(f"    {lbl!r},\n")
        f.write("]\n\n")
        f.write("label_map = {\n")
        for raw in raw_labels:
            f.write(f"    {raw!r}: {label_map[raw]!r},\n")
        f.write("}\n")

    print(f"[INFO] Generated {OUT_MODULE} with {len(ordered)} labels.")


if __name__ == "__main__":
    main()
