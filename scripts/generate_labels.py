# scripts/generate_labels.py
#!/usr/bin/env python3

import re
import csv
from pathlib import Path
import difflib

# Configuration
CSV_PATH = Path("data/metadata/clip_index.csv")
OUT_MODULE = Path("data/metadata/labels.py")
SIMILARITY = 0.8  # threshold for grouping labels


# Normalize raw label
def normalize(lbl: str) -> str:
    lbl = lbl.lower()
    lbl = re.sub(r"\W+", "", lbl)
    return lbl.strip()


# Read all unique raw labels
raw_labels = set()
with CSV_PATH.open() as f:
    reader = csv.DictReader(f)
    for row in reader:
        raw_labels.add(row["label"])

# Cluster labels by similarity
canonicals = []
groups = {}  # canonical -> [raws]
for raw in sorted(raw_labels):
    norm = normalize(raw)
    found = False
    for canon in canonicals:
        if difflib.SequenceMatcher(None, normalize(canon), norm).ratio() >= SIMILARITY:
            groups[canon].append(raw)
            found = True
            break
    if not found:
        canonicals.append(raw)
        groups[raw] = [raw]

# Build mapping raw -> canonical
label_map = {raw: canon for canon, raws in groups.items() for raw in raws}

# Write labels.py into data/metadata
with OUT_MODULE.open("w") as f:
    f.write("# AUTOGENERATED from clip_index.csv â€” do not edit manually\n\n")
    f.write("label_list = [\n")
    for canon in canonicals:
        f.write(f"    {canon!r},\n")
    f.write("]\n\n")
    f.write("label_map = {\n")
    for raw, canon in sorted(label_map.items()):
        f.write(f"    {raw!r}: {canon!r},\n")
    f.write("}\n")

print(f"[INFO] Generated {OUT_MODULE} with {len(canonicals)} labels.")
